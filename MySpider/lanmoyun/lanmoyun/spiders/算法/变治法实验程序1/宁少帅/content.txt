class Node(object):
   def __init__(self, key):
       self.key = key
       self.left = None
       self.right = None
       self.height = 0


class avl(object):
   def __init__(self):
       self.root = None

   def find(self, key):
       if self.root is None:
           return None
       else:
           return self.find1(key, self.root)

   def find1(self, key, node):
       if node is None:
           return None
       elif key < node.key:
           return self.find1(key, self.left)
       elif key > node.key:
           return self.find1(key, self.right)
       else:
           return node

   def findMin(self):
       if self.root is None:
           return None
       else:
           return self.find1Min(self.root)

   def find1Min(self, node):
       if node.left:
           return self.find1Min(node.left)
       else:
           return node

   def findMax(self):
       if self.root is None:
           return None
       else:
           return self.find1Max(self.root)

   def find1Max(self, node):
       if node.right:
           return self.find1Max(node.right)
       else:
           return node

   def height(self, node):
       if node is None:
           return -1
       else:
           return node.height

   def left1(self, node):
       k1 = node.left
       node.left = k1.right
       k1.right = node
       node.height = max(self.height(node.right), self.height(node.left)) + 1
       k1.height = max(self.height(k1.left), node.height) + 1
       return k1

   def right1(self, node):
       k1 = node.right
       node.right = k1.left
       k1.left = node
       node.height = max(self.height(node.right), self.height(node.left)) + 1
       k1.height = max(self.height(k1.right), node.height) + 1
       return k1

   def left2(self, node):
       node.left = self.right1(node.left)
       return self.left1(node)

   def right2(self, node):
       node.right = self.left1(node.right)
       return self.right1(node)

   def put(self, key):
       if not self.root:
           self.root = Node(key)
       else:
           self.root = self._put(key, self.root)

   def _put(self, key, node):
       if node is None:
           node = Node(key)
       elif key < node.key:
           node.left = self._put(key, node.left)
           if (self.height(node.left) - self.height(node.right)) == 2:
               if key < node.left.key:
                   node = self.left1(node)
               else:
                   node = self.left2(node)

       elif key > node.key:
           node.right = self._put(key, node.right)
           if (self.height(node.right) - self.height(node.left)) == 2:
               if key < node.right.key:
                   node = self.right2(node)
               else:
                   node = self.right1(node)

       node.height = max(self.height(node.right), self.height(node.left)) + 1
       return node

   def delete(self, key):
       self.root = self.remove(key, self.root)

   def remove(self, key, node):
       if node is None:
           print('Error,key not in tree')
       elif key < node.key:
           node.left = self.remove(key, node.left)
           if (self.height(node.right) - self.height(node.left)) == 2:
               if self.height(node.right.right) >= self.height(node.right.left):
                   node = self.right1(node)
               else:
                   node = self.right2(node)
           node.height = max(self.height(node.left), self.height(node.right)) + 1


       elif key > node.key:
           node.right = self.remove(key, node.right)
           if (self.height(node.left) - self.height(node.right)) == 2:
               if self.height(node.left.left) >= self.height(node.left.right):
                   node = self.left1(node)
               else:
                   node = self.left2(node)
           node.height = max(self.height(node.left), self.height(node.right)) + 1

       elif node.left and node.right:
           if node.left.height <= node.right.height:
               minNode = self.find1Min(node.right)
               node.key = minNode.key
               node.right = self.remove(node.key, node.right)
           else:
               maxNode = self.find1Max(node.left)
               node.key = maxNode.key
               node.left = self.remove(node.key, node.left)
           node.height = max(self.height(node.left), self.height(node.right)) + 1
       else:
           if node.right:
               node = node.right
           else:
               node = node.left

       return node

import random
a= avl()
l=[random.randint(1,100)for i in range(20)]
print('加入节点：',end=' ')
print(l)
for x in l:
   a.put(x)
li = []
while a.findMin() != None:
   li.append(a.findMin().key)
   a.delete(a.findMin().key)
print('排序后节点： {0}'.format(li))