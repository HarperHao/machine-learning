//AVL树的实现
public class AVLTree {
   private static class Node {
       Node left;
       Node right;
       int height;
       int data;
   }

   private int heigth(Node t) {
       if(t == null){
           return 0;
       }
       return t.height;
   }

   // LL
   private Node rightRotate(Node a) {
       Node b = a.left;
       a.left = b.right;
       b.right = a;
       a.height = max(heigth(a.left), heigth(a.right));
       b.height = max(heigth(b.left), heigth(b.right));
       return b;
   }

   // RR
   private Node leftRotate(Node a) {
       Node b = a.right;
       a.right = b.left;
       b.left = a;
       a.height = max(heigth(a.left), heigth(a.right));
       b.height = max(heigth(b.left), heigth(b.right));
       return b;
   }

   //LR
   private  Node leftRightRotate(Node a){
       a.left = leftRotate(a.left);
       return rightRotate(a);
   }

   //RL
   private Node rightLeftRotate(Node a){
       a.right = rightRotate(a.right);
       return leftRotate(a);
   }

   //insert
   public Node insert(int data, Node t){
       if(t == null){
           t = newNode(data);
       }else if(data < t.data){
           t.left = insert(data, t.left);
           if(heigth(t.left) - heigth(t.right) == 2){
               if(data < t.left.data){
                   t = rightRotate(t);
               }else{
                   t = leftRightRotate(t);
               }
           }
       }else{
           t.right = insert(data, t.right);
           if(heigth(t.right) - heigth(t.left) == 2){
               if(data > t.right.data){
                   t = leftRotate(t);
               }else{
                   t = rightLeftRotate(t);
               }
           }
       }
       t.height = max(heigth(t.left), heigth(t.right));
       return t;
   }

   //delete
   public Node delete(int data, Node t){
       if(t == null){
           return null;
       }
       if(t.data == data){
           if(t.right == null){
               t = t.left;
           }else{
               Node head = t.right;
               while(head.left != null){
                   head = head.left;
               }
               t.data = head.data;
               //还记得BST树删除节点吧
               t.right = delete(t.data, t.right);
               t.height = max(heigth(t.left), heigth(t.right)) + 1;
           }
           return t;
       }else if(t.data > data){
           t.left = delete(data, t.left);
       }else{
           t.right = delete(data, t.right);
       }
       t.height = max(heigth(t.left), heigth(t.right));

       //以上只是删除节点，但是需要保持平衡，所以还需旋转让其平衡以满足AVL的性质。
       if(t.left != null){
           t.left = rotate(t.left);
       }
       if(t.right != null){
           t.right = rotate(t.right);
       }
       return rotate(t);
   }
   private Node newNode(int data){
       Node a = new Node();
       a.left = a.right = null;
       a.height = 0;
       a.data = data;
       return a;
   }
   private int max(int heigth, int heigth2) {

       return heigth > heigth2 ? heigth : heigth2;
   }

   public void travel(Node root) {
       Node node = root;
       if (node == null) {
           return;
       }
       travel(node.left);
       System.out.print(node.data + " ");
       travel(node.right);
   }

   private Node rotate(Node t){              /*对于单个节点进行的AVL调整*/
       if(heigth(t.left) - heigth(t.right) == 2){
           if(heigth(t.left.left) >= heigth(t.left.right)){
               t = rightRotate(t);
           }
           else{
               t = leftRightRotate(t);
           }
       }
       if(heigth(t.right) - heigth(t.left) ==2){
           if(heigth(t.right.right) >= heigth(t.right.left)){
               t = leftRotate(t);
           }
           else{
               t = rightLeftRotate(t);
           }
       }
       return t;
   }

   public static void main(String[] args) {
       int[] a = {0, 1, 4, 3, 8, 9, 2, 5, 7, 6, -10};
       Node root = null;
       AVLTree avl = new AVLTree();
       for(int b : a){
           //   System.out.println("for:" + root);
           root = avl.insert(b, root);
       }
       System.out.println(root);
       avl.travel(root);

       avl.delete(9, root);
       System.out.println();
       avl.travel(root);
   }
}