LU·Ö½â
import numpy as np


def LUres(A, b):
   L = np.zeros(shape=(5, 5))
   U = np.zeros(shape=(5, 5))
   for i in range(0, 5):
       L[i][i] = 1
   for i in range(0, 5):
       U[0][i] = A[0][i]
   for i in range(1, 5):
       L[i][0] = A[0][i] / U[0][0]
   for r in range(1, 5):
       for i in range(r, 5):
           sum1 = 0
           for k in range(0, r):
               sum1 = sum1 + L[r][k] * U[k][i]
           U[r][i] = A[r][i] - sum1
       for i in range((r + 1), 5):
           sum2 = 0
           for k in range(0, r):
               sum2 = sum2 + L[i][k] * U[k][r]
           L[i][r] = (A[i][r] - sum2) / U[r][r]
   print("L=", L)
   print("U=", U)
   Y = np.zeros(shape=(5, 1))
   Y[0] = b[0]
   for i in range(0, 5):
       sum3 = 0
       for k in range(0, i):
           sum3 = sum3 + L[i][k] * Y[k]
       Y[i] = b[i] - sum3
   X = np.zeros(shape=(5, 1))
   X[4] = Y[4] / U[4][4]
   for i in range(3, -1, -1):
       sum4 = 0
       for k in range((i + 1), 5):
           sum4 = sum4 + U[i][k] * X[k]
       X[i] = (Y[i] - sum4) / U[i][i]
   print("X=", X)


A = np.array([[2, -1, 4, -3, 1], [-1, 1, 2, 1, 3],
             [4, 2, 3, 3, -1], [-3, 1, 3, 2, 4],
             [1, 3, -1, 4, 4]])
b = np.array([[11], [14], [4], [16], [18]])
LUres(A, b)