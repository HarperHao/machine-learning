def main():
  def max_heap(alist, heap_size, adjust_pos):
      left_child = adjust_pos * 2 + 1
      right_child = adjust_pos * 2 + 2
      large_pos = adjust_pos
      #保证子节点存在的情况，将large_pos指向左右子节点中较大的一个。
      if left_child < heap_size and alist[left_child] > alist[large_pos]:
          large_pos = left_child
      if right_child < heap_size and alist[right_child] > alist[large_pos]:
          large_pos = right_child
      #存在子节点大于父节点则进行交换，并递归完成后续所有子树的重建
      if large_pos != adjust_pos:
          alist[adjust_pos], alist[large_pos] = alist[large_pos], alist[adjust_pos]
          max_heap(alist, heap_size, large_pos)
         
  def build_heap(alist):
      last_parent = len(alist) // 2
      # 从最后一个有叶子节点的节点开始，遍历到根节点，把每个子树最大的节点往上移动，完成heap
      for i in range(last_parent-1, -1, -1):  
          max_heap(alist, len(alist), i)
         
  def sort_heap(alist):
      build_heap(alist)
      for i in range(len(alist)-1, -1, -1):
              alist[0], alist[i] = alist[i], alist[0]
              max_heap(alist, i, 0)
     
  alist = [33, 22, 11, 55, 30, 32, 35, 88, 89, 22]
  blist = [88, 77, 66, 55, 44, 33, 22, 11, 8, 7]
  sort_heap(blist)
  sort_heap(alist)
  print(alist)
  print(blist)
main()