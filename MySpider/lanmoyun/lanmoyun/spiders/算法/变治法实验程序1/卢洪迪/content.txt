class TreeNode:
   def __init__(self, val):
       self.val = val
       self.left = None
       self.right = None
       self.root = None

class AVLTree:
   def __init__(self):
       self.root = None

   # 返回左子树的高度
   def left_height(self, node):  # 开始传入根结点，后面传入每颗子树的根结点
       if node is None:
           return 0
       return self.tree_height(node.left)

   # 返回右子树的高度
   def right_height(self, node):  # 开始传入根结点，后面传入每颗子树的根结点
       if node is None:
           return 0
       return self.tree_height(node.right)

   # 返回以该结点为根结点的树的高度
   def tree_height(self, node):
       if node is None:
           return 0
       return max(self.tree_height(node.left), self.tree_height(node.right)) + 1

   # 进行左旋转
   def left_rotate(self, node):
       if node is None:
           return
       # 创建新的结点，以当前根结点的值
       new_node = copy.deepcopy(node)
       # 把新结点的左子树设为当前结点的左子树
       if(node.left):
           new_node.left = node.left
           node.left.root = new_node
       else:
           new_node.left = None
       # 把新结点的右子树设为当前结点的右子树的左子树
       if(node.right.left):
           new_node.right = node.right.left
           new_node.right.root = new_node
       else:
           new_node.right = None
       # 把当前结点的值替换成它的右子结点的值
       node.val = node.right.val
       # 把当前结点的右子树设置成当前结点的右子树的右子树
       if(node.right.right):
           node.right = node.right.right
           node.right.root = node
       else:
           node.right = None
       # 把当前结点的左子结点设置成（指向）新的结点
       node.left = new_node
       new_node.root = node

   # 进行右旋转
   def right_rotate(self, node):
       if node is None:
           return
       # 创建新的结点，以当前根结点的值
       new_node = copy.deepcopy(node)
       # 把新结点的右子树设为当前结点的右子树
       if(node.right):
           new_node.right = node.right
           node.right.root = new_node
       else:
           new_node.right = None
       # 把新结点的左子树设为当前结点的左子树的右子树
       if(node.left.right):
           new_node.left = node.left.right
           new_node.left.root = new_node
       else:
           new_node.left = None
       # 把当前结点的值替换成它的左子结点的值
       node.val = node.left.val
       # 把当前结点的左子树设置成当前结点的左子树的左子树
       if(node.left.left):
           node.left = node.left.left
           node.left.root = node
       else:
           node.left = None
       # 把当前结点的右子结点设置成（指向）新的结点
       node.right = new_node
       new_node.root = node

   # 循环添加结点
   def add(self, val):
       node = TreeNode(val)
       if self.root is None:
           self.root = node
           return
       queue = [self.root]
       while queue:
           temp_node = queue.pop(0)
           # 判断传入结点的值和当前子树结点的值关系
           if node.val < temp_node.val:
               if temp_node.left is None:
                   temp_node.left = node
                   node.root = temp_node    #  向上填写  父亲关系
                   return node.root
               else:
                   queue.append(temp_node.left)
           if node.val >= temp_node.val:
               if temp_node.right is None:
                   temp_node.right = node
                   node.root = temp_node   #    向上填写 父亲关系
                   return node.root
               else:
                   queue.append(temp_node.right)

   def jude_node(self, node):  # 判断二叉排序树是否需要调整（是否达到平衡）
       if self.right_height(node) - self.left_height(node) > 1:  # 右子树高于左子树
           # 如果它的右子树的左子树的高度 大于 它的右子树的右子树高度
           if node.right and self.left_height(node.right) > self.right_height(node.right):
               # 先对当前结点的右子结点（右子树）进行-> 右旋转
               self.right_rotate(node.right)
               # 再对当前结点进行左旋转
               self.left_rotate(node)
           else:
               # 直接进行左旋转
               self.left_rotate(node)
           return # 注意这个return 因为判断为一种情况，就要总结判断
       elif self.left_height(node) - self.right_height(node) > 1:  # 左子树高于右子树
           # 如果它的左子树的右子树的高度 大于 它的左子树的左子树的高度
           if node.left and self.right_height(node.left) > self.left_height(node.left):
               # 先对当前结点的左子结点（左子树）进行-> 左旋转
               self.left_rotate(node.left)
               # 再对当前结点进行右旋转
               self.right_rotate(node)
           else:
               # 直接进行右旋转
               self.right_rotate(node)
           return
       else:
           if node == None:
               return
           self.jude_node(node.root)


   # 中序遍历测试
   def in_order(self, node):
       if node is None:
           return
       self.in_order(node.left)
       print(node.val, end=" ")
       self.in_order(node.right)
#查找元素位置
   def find(self,key,node):
       print('node',node,'node.val',node.val)
       if node == None:
           return None
       elif key > node.val:
           return self.find(key,node.right)
       elif key < node.val:
           return self.find(key,node.left)
       else:
           return node
#查找以该节点为根的最大子元素
   def findmax(self,node):
       if node.right == None:
           return node
       else:
           node = node.right
           return self.findmax(node)
   #查找以该节点为根的最小子元素
   def findmin(self,node):
       if node.left == None:
           return node
       else:
           node = node.left
           return self.findmin(node)
#删除操作
   def delkey(self,key,node):
       print('key',type(key),'self.root',self.root)
       temp = self.find(key,node)
       if temp == None:
           print('元素查找失败！')
           return
       elif temp == self.root:
           if self.left_height(temp) >= self.right_height(temp):
               max = self.findmax(temp.left)
               max.val, temp.val = temp.val, max.val
               self.delkey(max.val,max)
           else:
               min = self.findmin(temp.right)
               min.val, temp.val = temp.val, min.val
               print('min.val',min.val)
               self.delkey(min.val,min)
           return
       elif temp.root.left == temp:
           if temp.left == None and temp.right == None:
               temp.root.left = None
               self.jude_node(temp.root)
           else:
               if self.left_height(temp)>=self.right_height(temp):
                   max = self.findmax(temp.left)
                   max.val,temp.val = temp.val,max.val
                   self.delkey(max.val,max)
               else:
                   min = self.findmin(temp.right)
                   min.val,temp.val = temp.val,min.val
                   self.delkey(min.val,min)
           return
       else:
           if temp.left == None and temp.right == None:
               temp.root.right = None
               self.jude_node(temp.root)
           else:
               if self.left_height(temp)>=self.right_height(temp):
                   max = self.findmax(temp.left)
                   max.val,temp.val = temp.val,max.val
                   self.delkey(max.val,max)
               else:
                   min = self.findmin(temp.right)
                   min.val,temp.val = temp.val,min.val
                   self.delkey(min.val,min)
           return





if __name__ == '__main__':
   a = AVLTree()
   node_array = [54,12,98,45,61]
   for item in node_array:
       temp=a.add(item)
       a.jude_node(temp)
   print("中序遍历结果为：")
   a.in_order(a.root)
   print()
   print('1.插入操作  2.删除操作  3.退出')
   while True:
       t = (int)(input('请输入'))
       if t == 1:
           temp = a.add((int)(input('请输入要加入的元素：')))
           a.jude_node(temp)
           print('中序遍历')
           a.in_order(a.root)
           print()
       elif t == 2:
           key = (int)(input('请输入删除的元素：'))
           a.delkey(key,a.root)
           print('中序遍历')
           a.in_order(a.root)
       else:
           break