#LU分解法求逆矩阵
#include<iostream>
#include<cstdio>
using namespace std;
#define M 15
double sumX(double U[M][M], double x[], int i, int m) {
double sX = 0.0;
for (int k = i + 1; k <= m; k++)
{
sX += U[i - 1][k - 1] * x[k - 1];
}
return sX;
}//计算求和
double sumY(double L[M][M], double y[], int i) {
double sY = 0.0;
for (int k = 1; k <= i - 1; k++)
{
sY += L[i - 1][k - 1] * y[k - 1];
}
return sY;
}//计算求和3
int main()
{
double a[M][M];
double L[M][M];
double U[M][M];
double e[M][M];
int n;
cin >> n;
for (int i = 0; i < n; i++)
for (int j = 0; j < n; j++)
{
cin >> a[i][j];
if (i == j)
e[i][j] = 1;
else
e[i][j] = 0;
}
double factor = 0;
for (int k = 0; k < n - 1; k++)
{
for (int i = k + 1; i < n; i++)
{
factor = a[i][k] / a[k][k];
a[i][k] = factor;
for (int j = k + 1; j < n; j++)
{
a[i][j] = a[i][j] - factor * a[k][j];
}
}
}
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
if (i == j)
{
L[i][j] = 1;
U[i][j] = a[i][j];
}
else if (i > j)
{
L[i][j] = a[i][j];
U[i][j] = 0;
}
else
{
L[i][j] = 0;
U[i][j] = a[i][j];
}
}
double result[M][M];
for (int m = 0; m < n; m++)
{
//由Ly=b 求y
double y[10] = { 0.0 };
y[0] = e[m][0];//y(1) = b(1);

for (int i = 2; i <= n; i++)
{
y[i - 1] = e[m][i - 1] - sumY(L, y, i);
}

//由 Ux=y 求x
double x[10] = { 0.0 };
for (int i = n; i >= 1; i--)
{
x[i - 1] = (y[i - 1] - sumX(U, x, i, n)) / U[i - 1][i - 1];
}
printf("y:\n");
for (int i = 0; i < n; i++)
{
printf("%f\n", y[i]);
}
printf("\n");
//输出x
printf("x:\n");
for (int i = 0; i < n; i++)
{
printf("%f\n", x[i]);
result[i][m] = x[i];
}
}
for (int i = 0; i < n; i++)
{
for (int j = 0; j < n; j++)
cout << result[i][j] << " ";
cout << endl;
}
return 0;
}