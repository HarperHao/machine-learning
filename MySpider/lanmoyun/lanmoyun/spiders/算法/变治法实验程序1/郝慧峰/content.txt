#堆排序 变治法
def swat(arr, start, end):     #交换父母节点和子节点 保证父母节点  大于等于孩子节点
   root = start
   while True:
       child = root * 2 + 1   #数组表示堆 父节点下标*2-1必为左孩子下标
       if child > end:        #判断是否有孩子 无责退出
           break
       if child + 1 <= end and arr[child] < arr[child + 1]: #判断右孩子和左孩子大小 找到孩子中最大的
           child += 1
       if arr[root] < arr[child]:                      #最大孩子与父母节点比较
           arr[root], arr[child] = arr[child], arr[root]   #交换俩数
           root = child            #将孩子下标作为下次循环的父母下标 将该支路全部循环一次
       else:
           break

def goujiandui_sort(arr):
   first = len(arr) // 2 - 1
   for start in range(first, -1, -1):  #从下到上一次循环查看是否 父节点大于孩子节点
       swat(arr, start, len(arr) - 1)
   for end in range(len(arr) - 1, 0, -1): #删除操作 将首数字与末数字交换
       arr[0], arr[end] = arr[end], arr[0]
       swat(arr, 0, end - 1)               #交换完再次构造堆

if __name__ == "__main__":
   l = [4, 1, 3, 9, 6, 2, 5, 8, 7, 10]
   print(l)
   goujiandui_sort(l)
   print("排序后{}".format(l))