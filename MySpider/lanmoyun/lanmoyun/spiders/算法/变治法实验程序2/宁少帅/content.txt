import numpy as np

def LU_decomposition(A):
   n = len(A[0])
   L = np.zeros([n, n])
   U = np.zeros([n, n])
   for i in range(n):
       L[i][i] = 1
       if i == 0:
           U[0][0] = A[0][0]
           for j in range(1, n):
               U[0][j] = A[0][j]
               L[j][0] = A[j][0] / U[0][0]
       else:
           for j in range(i, n):  # U
               temp = 0
               for k in range(0, i):
                   temp = temp + L[i][k] * U[k][j]
               U[i][j] = A[i][j] - temp
           for j in range(i + 1, n):  # L
               temp = 0
               for k in range(0, i):
                   temp = temp + L[j][k] * U[k][i]
               L[j][i] = (A[j][i] - temp) / U[i][i]
   return L, U


def ni_U(A):
   n=len(A[0])
   u = np.zeros([n, n])
   for i in range(n):
       u[i][i]=1/A[i][i]
       for j in range(i-1,-1,-1):
           s=0
           for k in range(j+1,i+1):
               s=s+A[j][k]*A[k][i]
           u[j][i]=-s/A[j][j]
   return u

#ÇóÄæ
def ni_L(A):
   n=len(A[0])
   l=np.zeros([n,n])
   for i in range(n):
       l[i][i]=1
       for j in range(i+1,n):
           for k in range(i, j):
               l[j][i] = l[j][i] - L[j][k] * l[k][i]
   return l


if __name__ == '__main__':
   A = [[2, -1, 1], [4, 1, -1], [1, 1, 1]]
   L, U = LU_decomposition(A)
   l=ni_L(L)
   u=ni_U(U)
   print('L:','\n',L)
   print('U:','\n',U)
   print('l:', '\n', l)
   print('u:', '\n', u)
   print('Äæ¾ØÕó£º',np.dot(u,l))