实验思想：一棵AVL树要求它的每个节点的左右子树的高度差不能超过1。一棵红黑树能够容忍同一节点的一棵子树的高度是另一棵子树的两倍。这里只讨论AVL树。如果插入的一个新节点使得一棵AVL树失去了平衡，用旋转对这棵树做一个变换。AVL树的旋转，是以某节点为根的子树的一个本地变换，该节点的平衡要么变成了+2要么变成了-2。如果有若干个这样的节点，先找出最靠近新插入的叶子的不平衡节点，然后旋转以该节点为根的子树
class Node:
   def __init__(self,value):
       self.value=value
       self.parent=None
       self.left=None
       self.right=None
   def add_parent(self,parent):
       self.parent=parent
   def add_left(self,left):
       self.left=left
   def add_right(self,right):
       self.right=right
   def __str__(self):
       if self.left is not None and self.right is not None:
           return str(self.value)+" l:"+str(self.left)+" r:"+str(self.right)
       elif self.left is not None and self.right is None:
           return str(self.value)  + " l:" + str(self.left)
       elif self.left is None and self.right is not None:
           return str(self.value)  + " r:" + str(self.right)
       else:
           return str(self.value)

class AVLTree:
   def __init__(self):
       self.root=None
   def __str__(self):
       return str(self.root)
   def compute_height(self,root_node):
       if root_node is None:
           return 0
       height_left = 0
       height_right = 0
       if root_node.left is not None:
           height_left = self.compute_height(root_node.left)
       if root_node.right is not None:
           height_right = self.compute_height(root_node.right)
       height=max(height_left,height_right)+1
       return height
   def left_rotate(self,parent): # insert to right's right
       sub_right=parent.right
       sub_right_left=parent.right.left
       parent.right=sub_right_left
       if sub_right_left is not None:
           sub_right_left.parent=parent
       sub_right.left=parent
       sub_right.parent=parent.parent
       return sub_right
   def right_rotate(self,parent): # insert to left's left
       sub_left = parent.left
       sub_left_right = parent.left.right
       parent.left = sub_left_right
       if sub_left_right is not None:
           sub_left_right.parent = parent
       sub_left.right = parent
       sub_left.parent = parent.parent
       return sub_left
   def right_left_rotate(self,parent): # insert to right's left
       sub_right=parent.right
       sub_right_left=parent.right.left
       sub_right=self.right_rotate(sub_right)
       parent.right=sub_right
       parent=self.left_rotate(parent)
       return parent
   def left_right_rotate(self,parent): # insert to left's right
       sub_left=parent.left
       sub_left_right=parent.left.right
       sub_left=self.left_rotate(sub_left)
       parent.left = sub_left
       parent=self.right_rotate(parent)
       return parent
   def insert(self,parent,root_node,new_node):
       if root_node is None:
           root_node=new_node
           new_node.parent=parent
       elif new_node.value == root_node.value:
           print("ERROR")
           exit()
       else:
           if new_node.value<root_node.value:
               root_node.left=self.insert(root_node,root_node.left,new_node)
               if self.compute_height(root_node.left)-self.compute_height(root_node.right)>1:
                   if new_node.value < root_node.left.value: # insert to left's left
                       root_node=self.right_rotate(root_node)
                   else: # insert to left's right
                       root_node=self.left_right_rotate(root_node)
           else:
               root_node.right=self.insert(root_node,root_node.right, new_node)
               if self.compute_height(root_node.right)-self.compute_height(root_node.left)>1:
                   if new_node.value > root_node.right.value: # insert to right's right
                       root_node=self.left_rotate(root_node)
                   else: # insert to right's left
                       root_node=self.right_left_rotate(root_node)
       if self.root is None:
           self.root=new_node
       if parent is None:
           self.root=root_node
       return root_node
   def min_node(self,root_node):
       while root_node.left is not None:
           root_node=root_node.left
       return root_node
   def max_node(self,root_node):
       while root_node.right is not None:
           root_node=root_node.right
       return root_node
   def delete(self,root_node,node):
       if root_node is None or node is None:
           print("ERROR")
           exit()
       if node.value<root_node.value:
           root_node.left=self.delete(root_node.left,node)
           if self.compute_height(root_node.right)-self.compute_height(root_node.left)>1:
               if self.compute_height(root_node.right.left)>self.compute_height(root_node.right.right):  # insert to right's left
                   root_node = self.right_left_rotate(root_node)
               else:  # insert to right's right
                   root_node = self.left_rotate(root_node)
       elif node.value>root_node.value:
           root_node.right = self.delete(root_node.right, node)
           if self.compute_height(root_node.left) - self.compute_height(root_node.right) > 1:
               if self.compute_height(root_node.left.left)>self.compute_height(root_node.left.right): # insert to left's left
                   root_node = self.right_rotate(root_node)
               else: # insert ot left's right
                   root_node = self.left_right_rotate(root_node)
       else:
           if root_node.left is not None and root_node.right is not None:
               if self.compute_height(root_node.left)>self.compute_height(root_node.right):
                   max_node=self.max_node(root_node.left)
                   root_node.value=max_node.value
                   root_node.left=self.delete(root_node.left,max_node)
               else:
                   min_node=self.min_node(root_node.right)
                   root_node.value = min_node.value
                   root_node.right = self.delete(root_node.right, min_node)
           else:
               if root_node.left is not None:
                   root_node=root_node.left
               elif root_node.right is not None:
                   root_node = root_node.right
               else:
                   root_node=None
       return root_node
if __name__=="__main__":
   avlt=AVLTree()
   node0 = Node(0)
   avlt.insert(None,avlt.root,node0)
   node4 = Node(4)
   avlt.insert(None,avlt.root, node4)
   node2 = Node(2)
   avlt.insert(None,avlt.root, node2)
   node1 = Node(1)
   avlt.insert(None,avlt.root, node1)
   node7 = Node(7)
   avlt.insert(None,avlt.root, node7)
   node5 = Node(5)
   avlt.insert(None,avlt.root, node5)
   node6 = Node(6)
   avlt.insert(None,avlt.root, node6)
   node3 = Node(3)
   avlt.insert(None,avlt.root, node3)
   node8 = Node(8)
   avlt.insert(None,avlt.root, node8)
   print(avlt)
   avlt.delete(avlt.root,node4)
   print(avlt.delete(avlt.root,node3))