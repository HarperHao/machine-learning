#LU分解求逆矩阵
import numpy as np

def LU_decomposition(A):
   n = len(A[0])
   L = np.zeros([n, n])
   U = np.zeros([n, n])
   for i in range(n):
       L[i][i] = 1
       if i == 0:
           U[0][0] = A[0][0]
           for j in range(1, n):
               U[0][j] = A[0][j]
               L[j][0] = A[j][0]/U[0][0]
       else:
               for j in range(i, n):#U
                   temp = 0
                   for k in range(0, i):
                       temp = temp+L[i][k] * U[k][j]
                   U[i][j]=A[i][j]-temp
               for j in range(i+1, n):#L
                   temp = 0
                   for k in range(0, i):
                       temp = temp + L[j][k] * U[k][i]
                   L[j][i] = (A[j][i] - temp)/U[i][i]
   return L, U

def solve(A, b):
   L, U = LU_decomposition(A)  # LU分解
   print("LU分解为：")
   print(L)
   print(U)
   Z = np.linalg.solve(L, b)            # L*Z=b U*X=Z
   X = np.linalg.solve(U, Z)
   return X

A = np.random.randint(1, 10, size=[3, 3])
print(A)
y = np.identity(3)
X = []
X = solve(A, y)
print("其逆矩阵为：")
print(X)