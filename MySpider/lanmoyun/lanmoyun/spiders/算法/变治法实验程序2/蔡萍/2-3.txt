ackage algorithm;
import java.util.LinkedList;
import java.util.Queue;
public class b1 {
	private Node root;
	private static final boolean RED = true;
	private static final boolean BLACK = false;
	private class Node {
		Object val;
		Node left, right;
		boolean color;

		Node(Object val, boolean color) {
			this.val = val;
			// this.N = N;
			this.color = color;
		}
	}

	private boolean isRed(Node x) {
		if (x == null)
			return false;
		return x.color == RED;
	}
	private Node rotateLeft(Node h) {
		Node x = h.right;
		h.right = x.left;
		x.left = h;
		x.color = h.color;
		h.color = RED;
		return x;
	}
	private Node rotateRight(Node h) {
		Node x = h.left;
		h.left = x.right;
		x.right = h;
		x.color = h.color;
		h.color = RED;
		return x;
	}
	private void filpColors(Node h) {
		h.color = RED;
		h.left.color = BLACK;
		h.right.color = BLACK;
	}
	public void put(Object val) {
		root = put(root, val);
		root.color = BLACK;
	}
	private Node put(Node h, Object val) {

		if (h == null)
			return new Node(val, RED);

		if ((int) val < (int) h.val) {
			h.left = put(h.left, val);
		} else if ((int) val > (int) h.val)
			h.right = put(h.right, val);
		if (isRed(h.right) && !isRed(h.left))
			h = rotateLeft(h);
		if (isRed(h.left) && isRed(h.left.left))
			h = rotateRight(h);
		if (isRed(h.left) && isRed(h.right))
			filpColors(h);
		return h;
	}
public static void main(String args[]) {
	char arr[] = { 'S', 'E', 'A', 'R', 'C', 'H', 'X', 'M' };
	b1 a = new b1();
	a.put((int) arr[0]);
	for (int i = 1; i < arr.length; i++) {
		a.bfs(a.root);
		System.out.println("****************");
		a.put((int) arr[i]);
	}
	a.bfs(a.root);
}
public int level(Node no) {
	if (no == null) {
		return 0;
	}
	if (no.color == BLACK)
		return 1 + level(no.right);
	return level(no.right);
}
public void bfs(Node rootNode) {
	Queue<Node> queue = new LinkedList<>();
	if (rootNode == null)
		return;
	if (root.left != null && root.left.color == RED)
		queue.offer(root.left);
	queue.offer(rootNode);
	Queue<Node> tempQue = new LinkedList<>();
	while (!queue.isEmpty()) {
		Node node = queue.poll();
		System.out.print((char) (int) node.val);
		if (node.color == RED)
			System.out.print("/");
		if (node.color == RED) {
			if (node.left != null && node.left.left != null && node.left.left.color == RED)
				tempQue.offer(node.left.left);
			if (node.left != null)
				tempQue.offer(node.left);
			if (node.right != null && node.right.left != null && node.right.left.color == RED)
				tempQue.offer(node.right.left);
			if (node.right != null)
				tempQue.offer(node.right);
		} else {
			if (node.left != null && node.left.color == BLACK) {
				if (node.left.left != null && node.left.left.color == RED) {
					tempQue.offer(node.left.left);
				}
				tempQue.offer(node.left);
			}
			if (node.right != null && node.right.left != null && node.right.left.color == RED)
				tempQue.offer(node.right.left);
			if (node.right != null)
				tempQue.offer(node.right);
		}
		//队列为空说明这一层打印完了
		if (queue.isEmpty()) {
			System.out.println();
			queue = tempQue;
			tempQue = new LinkedList<>();
		}
	}
}

}