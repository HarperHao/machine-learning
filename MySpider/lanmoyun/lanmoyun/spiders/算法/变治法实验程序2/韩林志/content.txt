package com.liuzhen.heapsort;

public class HeapSort {
   public static int[] getMaxA(int[] array,int a,int b ,int c){
       int temp = 0;
       if(array[b] >= array[c]){
           if(array[a] < array[b]){
               temp = array[a];
               array[a] = array[b];
               array[b] = temp;
           }
       }
       else{
           if(array[a] < array[c]){
               temp = array[a];
               array[a] = array[c];
               array[c] = temp;
           }
       }
       return array;
   }

   public static int[] getHeapSort(int[] array , int len){
       boolean judge = true;
       while(judge){
           for(int i = 1;i <= len/2;i++){
              if((2*i+1) < len)  
                  array = getMaxA(array,i,(2*i),(2*i+1));
              if((2*i) == len-1){
                  int temp = 0;
                  if(array[i] < array[2*i]){
                      temp = array[i];
                      array[i] = array[2*i];
                      array[2*i] = temp;
                  }
              }
           }
           int j;
           for(j = 1;j < len/2;j++){
               if((2*j+1) < len){
                   if(array[j] < array[2*j])
                       break;
                   if(array[j] < array[2*j+1])
                       break;
               }
               if((2*j) == len-1){
                   if(array[j] < array[2*j])
                       break;
               }
           }
           
           if(j == len/2)
               judge = false;
       }        
       return array;
   }

   public static int[] getResultSort(int[] array , int len){
       array =  getHeapSort(array , len);
       int temp = 0;
       int sortLen = len;
       while(sortLen > 2){    
           temp = array[1];
           array[1] = array[sortLen-1];
           array[sortLen-1] = temp;            
           sortLen = sortLen - 1;          
           array = getHeapSort(array,sortLen);
       }        
       return array;
   }
   public static int[] initArray(int n){
       int[] result = new int[n];
       result[0] = 0;
       for(int i = 1;i < n;i++)
           result[i] = (int)(Math.random()*1000);
       return result;        
   }
   public static void main(String args[]){
       int[] array = {0,2,5,7,8,9,18,35,46,24,37,65,49,32,68,16};
       int len = array.length;
       int[] result = getResultSort(array,len);
       System.out.println("输入数组，使用堆排序，最终排序的结果：");
       for(int i = 1;i < len;i++){
           System.out.print(result[i]+"\t");
       }
       System.out.println();
       System.out.println();
       int[] oneArray = initArray(1000);
       int len1 = 1000;
       int[] result1 = getResultSort(oneArray,len1);
       System.out.println("系统随机生成的长度为1000的数组，使用堆排序，最终排序结果：");
       for(int j = 1;j < len1;j++){
           System.out.print(result1[j]+"\t");
           if(j%15 == 0)
               System.out.println();
       }    
   }
}