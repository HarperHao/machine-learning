#AVL树的建立、插入、删除操作


class Node(object):
   def __init__(self,key):
       self.key=key
       self.left=None
       self.right=None
       self.height=0
class AVLTree(object):
   def __init__(self):
       self.root=None
   def height(self,node):
       if node is None:
           return -1
       else:
           return node.height
   def _all(self,root,result):
       if not root.left is None:
           self._all(root.left,result)
       result.append(root)
       if not root.right is None:
           self._all(root.right,result)
   def show(self):
           result=[]
           self._all(self.root,result)
           print("keys in tree:")
           for item in result:
               print(item.key,' ',end='')
   def _findMin(self,root):
       data=[]
       self._all(root,data)
       index=0
       value=data[0].key
       i=0
       while i<len(data):
           if value>data[i].key:
               index=i
               value=data[i].key
           i+=1
       return data[index]
   def _findMax(self,root):
       data=[]
       self._all(root,data)
       index=0
       value=data[0].key
       i=0
       while i<len(data):
           if value<data[i].key:
               index=i
               value=data[i].key
           i+=1
       return data[index]
   def creat(self):
       x=input("Input keys:")
       for key in x.split():
           self.put(key)
   def find(self,key):
       return self._find(key,self.root)
   def _find(self,key,node):
       if node is None:
           return None
       elif key<node.key:
           return self._find(key,node.left)
       elif key>node.key:
           return self._find(key,node.right)
       else:
           return node
   def put(self,key):
           self.root=self._put(key,self.root)
   def singleLeftRotate(self,node):
       k1=node.left
       node.left=k1.right
       k1.right=node
       node.height=max(self.height(node.right),self.height(node.left))+1
       k1.height=max(self.height(k1.left),node.height)+1
       return k1
   def singleRightRotate(self,node):
       k1=node.right
       node.right=k1.left
       k1.left=node
       node.height=max(self.height(node.right),self.height(node.left))+1
       k1.height=max(self.height(k1.right),node.height)+1
       return k1
   def doubleLeftRotate(self,node):
       node.left=self.singleRightRotate(node.left)
       return self.singleLeftRotate(node)
   def doubleRightRotate(self,node):
       node.right=self.singleLeftRotate(node.right)
       return self.singleRightRotate(node)
   def _put(self,key,root):
       if root is None:
           root=Node(key)
       elif key<root.key:
           root.left=self._put(key,root.left)
           if (self.height(root.left)-self.height(root.right))==2:
               if key<root.left.key:
                   root=self.singleLeftRotate(root)
               else:
                   root=self.doubleLeftRotate(root)    
       elif key>root.key:
           root.right=self._put(key,root.right)
           if (self.height(root.right)-self.height(root.left))==2:
               if key<root.right.key:
                   root=self.doubleRightRotate(root)
               else:
                   root=self.singleRightRotate(root)  
       root.height=max(self.height(root.right),self.height(root.left))+1
       return root
   def delete(self,key):
       self.root=self.remove(key,self.root)
   def remove(self,key,node):
       if node is None:
           print("Error,key not in tree")
       elif key<node.key:
           node.left=self.remove(key,node.left)
           if (self.height(node.right)-self.height(node.left))==2:
               if self.height(node.right.right)>=self.height(node.right.left):
                   node=self.singleRightRotate(node)
               else:
                   node=self.doubleRightRotate(node)
           node.height=max(self.height(node.left),self.height(node.right))+1
       elif key>node.key:
           node.right=self.remove(key,node.right)
           if (self.height(node.left)-self.height(node.right))==2:
               if self.height(node.left.left)>=self.height(node.left.right):
                   node=self.singleLeftRotate(node)
               else:
                   node=self.doubleLeftRotate(node)
           node.height=max(self.height(node.left),self.height(node.right))+1        
       elif node.left and node.right:
           if node.left.height<=node.right.height:
               minNode=self._findMin(node.right)
               node.key=minNode.key
               node.right=self.remove(node.key,node.right)
           else:
               maxNode=self._findMax(node.left)
               node.key=maxNode.key
               node.left=self.remove(node.key,node.left)
           node.height=max(self.height(node.left),self.height(node.right))+1
       else:
           if node.right:
               node=node.right
           else:
               node=node.left      
       return node
tree=AVLTree()
tree.creat()
tree.show()
key=input("Input a key to add:")
tree.put(key)
tree.show()
key=input("Input a key to delete:")
tree.delete(key)
tree.show()