AVL树：
#include<iostream>
#include<algorithm>
using namespace std;
struct node {
node* l;
node* r;
int data, h, bf;
};
node* newnode(int x) {
node* p = new node();
p->l = p->r = 0;
p->h = 1;
p->data = x;
return p;
}
void update(node* p) {
int l = 0, r = 0;
if (p->l) l = p->l->h;
if (p->r) r = p->r->h;
p->h = max(l, r) + 1;
p->bf = l - r;
}
void L(node*& a) {
node* b = a->r;
a->r = b->l;
b->l = a;
update(a);
update(b);
a = b;
}
void R(node*& a) {
node* b = a->l;
a->l = b->r;
b->r = a;
update(a);
update(b);
a = b;
}
void insert(node*& b, int x) {
if (!b) {
b = newnode(x);
return;
}
if (x < b->data) {
insert(b->l, x);
update(b);
if (b->bf == 2) {
if (b->l->bf == 1) {//LL
R(b);
}
else if (b->l->bf == -1) {//LR
L(b->l);
R(b);
}
}
}
else {
insert(b->r, x);
update(b);
if (b->bf == -2) {
if (b->r->bf == -1) {//RR
L(b);
}
else if (b->r->bf == 1) {//RL
R(b->r);
L(b);
}
}
}
}
node* creat(int* a, int n) {
node* root = 0;
for (int i = 0; i < n; i++)
{
insert(root, a[i]);
}
return root;
}
void inorder(node* root) {
if (root) {
inorder(root->l);
printf("节点的值为：%d，节点的平衡因子：%d\n",root->data,root->bf);
inorder(root->r);
}
}
int main() {
int n;
int a[30];
cout << "输入节点个数及各个节点的值：";
cin >> n;
for (int i = 0; i < n; i++)
{
cin >> a[i];
}
node* root = creat(a, n);
inorder(root);
return 0;
}