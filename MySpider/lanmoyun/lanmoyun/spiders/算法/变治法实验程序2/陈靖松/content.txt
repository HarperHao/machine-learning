from fractions import  Fraction
import numpy as np
from numpy.linalg import solve
A=[[1,2,-1],[3,1,0],[1,-2,1]]

def Uc(A):
   com= list(np.zeros((len(A), len(A))))
   x = []
   for m in com:
       x.append(list(m))
   u=x
   for i in range(0,len(A)):
       u[0][i]=A[0][i]
   return u
U=Uc(A)
def Lc(A, u):
   com = list(np.zeros((len(A), len(A))))
   x = []
   for m in com:
       x.append(list(m))
   l=x
   for i in range(0,len(A)):
       l[i][i]=1
       if i==0:
           pass
       else:
           l[i][0]=A[i][0]/u[0][0]
   return l

L=Lc(A,U)
def u(A,L,U,k,j):
   sum1=0
   for m in range(0,k):
       sum1=sum1+L[k][m]*U[m][j]
   U[k][j]=A[k][j]-sum1
   return U

def l(A,L,U,i,k):
   sum1=0
   for m in range(0,k):
       sum1=sum1+L[i][m]*U[m][k]
   L[i][k]=(A[i][k]-sum1)/U[k][k]
   return L


n=1
while n<len(A):
   t=1
   while t<len(A):
       if t>=n:
           U=u(A,L,U,n,t)
       else:
           L=l(A,L,U,n,t)
       t=t+1
   n=n+1
print("U:")
print (U)
print("L:")
print(L)
def fusion(U,L):
   a_inverse_T = []
   unitMatrix = []

   for i in range(n):
       line = []
       for j in range(n):
           if i == j:
               a = 1
           else:
               a = 0
           line.append(a)
       unitMatrix.append(line)

   for i in range(n):
       y = [0 for i in range(n)]
       a = np.mat(L)
       b = np.mat([unitMatrix[i]]).T
       s = solve(a, b)
       a = np.mat(U)
       b = np.mat(s)
       f = solve(a, b)
       f = np.asarray(f)
       f = f.tolist()
       a_inverse_T.append([j[0] for j in f[:]])

   a_inverse = []
   for i in range(n):
       a_inverse.append([round(a_inverse_T[j][i], 3) for j in range(n)])

   for i in range(n):
       print(a_inverse[i], end='\n')
fusion(U,L)