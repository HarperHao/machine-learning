import  numpy as np
'''
具体思路（其实和手写计算方程一样)
一将增广矩阵消元成为上三角矩阵
二、从上向下进行回带完成方程求解
'''
import numpy as np


def define(a, b):
   cout = 0
   m, n = a.shape


   l = np.zeros((n, n))#zeros函数用来返回来一个给定形状和类型的用0填充的数组；
   for i in range(n):
       # 限制条件
       if (a[i][i] == 0):
            print("no answer")

       # j表示列
       for k in range(n - 1):
           for i in range(k + 1, n):
               l[i][k] = a[i][k] / a[k][k]
               cout += 1
               for j in range(m):
                   a[i][j] = a[i][j] - l[i][k] * a[k][j]
                   cout += 1
               b[i] = b[i] - l[i][k] * b[k]
       # 回代求出方程解
       x = np.zeros(n)
       x[n - 1] = b[n - 1] / a[n - 1][n - 1]

       for i in range(n - 2, -1, -1):
           for j in range(i + 1, n):
               b[i] -= a[i][j] * x[j]
           x[i] = b[i] / a[i][i]
       for i in range(n):
           print("x" + str(i + 1) + " = ", x[i])
       print("x" " = ", x)



if __name__ == '__main__':
   a = np.array([[1,1,1], [1,2,4], [1,3,9]])
   b = np.array([3,7,13])
   define(a, b)