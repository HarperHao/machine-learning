2-3树
class Node:

   def __init__(self, leftValue, rightValue=None):
       self.leftValue = leftValue

       self.rightValue = rightValue

       self.leftChild = None

       self.centerChild = None

       self.rightChild = None

       self.parent = None

   def isLeaf(self):
       return self.leftChild is None

   def childList(self):
       result = [self.leftChild, self.centerChild, self.rightChild]

       return [i for i in result if i is not None]

   def valueList(self):
       result = [self.leftValue, self.rightValue]

       return [i for i in result if i is not None]

   def isEmpty(self):
       return len(self.valueList()) == 0


def setParent(parent, child, position='l'):
   if position == 'l':

       parent.leftChild = child

       if child != None:
           child.parent = parent

   elif position == 'c':

       parent.centerChild = child

       if child != None:
           child.parent = parent

   else:

       parent.rightChild = child

       if child != None:
           child.parent = parent


def add(N, n):
   if N.rightValue is None:

       [Nx, Ny] = sorted([N, n], key=lambda i: i.leftValue)

       x, y = Nx.leftValue, Ny.leftValue

       Nxy = Node(x, y)

       setParent(Nxy, Nx.leftChild, 'l')

       setParent(Nxy, Ny.centerChild, position='r')

       childrenList = [i for i in N.childList() if n.leftValue not in i.valueList()] + n.childList()

       setParent(child=findOne(childrenList, lambda i: x < i.leftValue < y),

                 parent=Nxy, position='c')

       return Nxy

   else:

       [x, y, z] = sorted(N.valueList() + n.valueList())

       l_link = [i for i in N.childList() if n.leftValue not in i.valueList()] + n.childList()

       Nx, Ny, Nz = Node(x), Node(y), Node(z)

       setParent(Nx, findOne(l_link, lambda i: i.leftValue < x), 'l')

       setParent(Nx, findOne(l_link, lambda i: x < i.leftValue < y), 'c')

       setParent(Nz, findOne(l_link, lambda i: y < i.leftValue < z), 'l')

       setParent(Nz, findOne(l_link, lambda i: z < i.leftValue), position='c')

       setParent(Ny, Nx, 'l')

       setParent(Ny, Nz, 'c')

       return Ny


def findOne(list, filter_):
   for x in list:

       if filter_(x):
           return x

   return None


def ins(root, item):
   if root is None:
       return Node(item)

   if root.isLeaf():

       return add(root, Node(item))

   else:

       if item < root.leftValue:

           retval = ins(root.leftChild, item)

           if set(root.leftChild.valueList()) <= set(retval.valueList()):

               setParent(root, retval, 'l')

               return root

           else:

               return add(root, retval)

       elif root.rightValue is None or item < root.rightValue:

           retval = ins(root.centerChild, item)

           if set(root.centerChild.valueList()) <= set(retval.valueList()):

               setParent(parent=root, child=retval, position='c')

               return root

           else:

               return add(root, retval)

       else:

           retval = ins(root.rightChild, item)

           if set(root.rightChild.valueList()) <= set(retval.valueList()):

               setParent(parent=root, child=retval, position='r')

               return root

           else:

               return add(root, retval)


def bfs(N):
   q = []

   q.append(N)

   while q:

       p = q.pop(0)

       for v in p.valueList():
           print(v)

       for n in p.childList():
           q.append(n)


print("原树为：")
root = Node('S')

root = ins(root, 'E')

root = ins(root, 'A')

root = ins(root, 'R')

root = ins(root, 'C')

root = ins(root, 'H')

root = ins(root, 'X')

root = ins(root, 'M')

root = ins(root, 'P')

root = ins(root, 'L')

root_ = Node('A')

root_ = ins(root_, 'C')

root_ = ins(root_, 'E')

root_ = ins(root_, 'H')

root_ = ins(root_, 'L')

root_ = ins(root_, 'M')

root_ = ins(root_, 'P')

root_ = ins(root_, 'R')

root_ = ins(root_, 'S')

root_ = ins(root_, 'X')

root_ = ins(root_, 'Z')

bfs(root_)

n = input("请输入增加的子树：")

root_ = ins(root_, n)

print("增加后的树为：")

bfs(root_)