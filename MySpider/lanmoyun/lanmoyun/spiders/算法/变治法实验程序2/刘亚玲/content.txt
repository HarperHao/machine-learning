"""
A【NxN】矩阵分解为下三角矩阵L乘以上三角U，U的逆乘以L的逆=A的逆
"""
import numpy as np

def LU_(A):#LU分解
   n = len(A[0])
   L = np.zeros([n, n])#返回指定形状，类型的新数组，填充0
   U = np.zeros([n, n])
   for i in range(n):
       L[i][i] = 1
       if i == 0:
           U[0][0] = A[0][0]
           for j in range(1, n):
               U[0][j] = A[0][j]
               L[j][0] = A[j][0] / U[0][0]
       else:
           for j in range(i, n):  # U
               t = 0
               for k in range(0, i):
                   t = t + L[i][k] * U[k][j]
               U[i][j] = A[i][j] - t
           for j in range(i + 1, n):  # L
               t = 0
               for k in range(0, i):
                   t = t + L[j][k] * U[k][i]
               L[j][i] = (A[j][i] - t) / U[i][i]
   return L, U

def inverse(L:[]):#求逆
   c=0
   for i in range(len(L)):#判断L,U
       for j in range(i+1,len(L)):
           if L[i][j]!=0:#U
               c=1
               break
       if c==1:
           break
   L_1 = np.zeros([len(L), len(L)])
   for i in range(len(L)):
           L_1[i][i] = 1
   if c==0:#L逆
       for i in range(1,len(L)):
           for j in range(i + 1):
               for k in range(0,i):
                   L_1[i][j]=L_1[i][j]-L[i][j]*L_1[k][j]
   else :#U逆
       L_1[-1][-1]=1/L[-1][-1]
       for i in range(len(L)-1):
               L_1[i][i]=1/L[i][i]
       for i in range(len(L)):
           for j in range(i+1,len(L)):
               L[i][j]=L[i][j]/L[i][i]
       for i in range(len(L)):
           L[i][i]=1
       for i in range(-2,-len(L)-1,-1):
           for j in range(-1,i,-1):
               for k in range(-1,i,-1):
                   L_1[i][j] = L_1[i][j] - L[i][j] * L_1[k][j]
                   L[i][j]=L[i][j]-L[i][j]*L[k][j]
   return L_1

def AxB(A,B):#乘积
   U = np.zeros([len(A), len(A)])
   for i in range(len(A)):
       for j in range(len(A)):
           for k in range(len(A)):
               U[i][j]=U[i][j]+A[i][k]*B[k][j]
   print(U)

def main():
   A = [[2, -1, 1], [4, 1, -1], [1, 1, 1]]
   L,U=LU_(A)
   print("L")
   print(L)
   print('U')
   print(U)
   L_1=inverse(L)
   print("L_1")
   print(L_1)
   U_1=inverse(U)
   print("U_1")
   print(U_1)
   print('A_1')
   AxB(U_1,L_1)
main()