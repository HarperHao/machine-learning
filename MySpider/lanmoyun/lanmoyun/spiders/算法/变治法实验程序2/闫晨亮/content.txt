AVL树（变治法）
#include <stdio.h>
#include <stdlib.h>

typedef int Type;

typedef struct AVLTreeNode{
   Type key;          //键值                
   int height;
   struct AVLTreeNode *left;    //左孩子
   struct AVLTreeNode *right;   //右孩子
}Node, *AVLTree;

int MAX(int a,int b)     //返回两个数中的最大值
{
if(a>b)
return a;
else
return b;
}

int Height(AVLTree tree)   //AVL树的高度
{
if(tree==NULL)
return -1;
else
return tree->height;
}

Node* avltree_search(AVLTree x, Type key)     //查找AVL树中值为key的节点
{
   while ((x!=NULL) && (x->key!=key))
   {
       if (key < x->key)
           x = x->left;
       else
           x = x->right;
   }
   return x;
}

void inorder_avltree(AVLTree tree)      //中序遍历AVL树
{
   if(tree != NULL)
   {
       inorder_avltree(tree->left);
       printf("%d ", tree->key);
       inorder_avltree(tree->right);
   }
}

Node* avltree_minimum(AVLTree tree)      //查找AVL树最小节点
{
   if (tree == NULL)
       return NULL;

   while(tree->left != NULL)
       tree = tree->left;
   return tree;
}

Node* avltree_maximum(AVLTree tree)      //查找AVL树最大节点
{
   if (tree == NULL)
       return NULL;

   while(tree->right != NULL)
       tree = tree->right;
   return tree;
}

static Node* left_left_rotation(AVLTree k2)    //LL旋转
{
   AVLTree k1;

   k1 = k2->left;
   k2->left = k1->right;
   k1->right = k2;

   k2->height = MAX( Height(k2->left), Height(k2->right)) + 1;
   k1->height = MAX( Height(k1->left), k2->height) + 1;

   return k1;
}

static Node* right_right_rotation(AVLTree k1)   //RR旋转
{
   AVLTree k2;

   k2 = k1->right;
   k1->right = k2->left;
   k2->left = k1;

   k1->height = MAX( Height(k1->left), Height(k1->right)) + 1;
   k2->height = MAX( Height(k2->right), k1->height) + 1;

   return k2;
}

static Node* left_right_rotation(AVLTree k3)    //LR旋转
{
   k3->left = right_right_rotation(k3->left);

   return left_left_rotation(k3);
}

static Node* right_left_rotation(AVLTree k1)     //RL旋转
{
   k1->right = left_left_rotation(k1->right);

   return right_right_rotation(k1);
}

static Node* avltree_create_node(Type key, Node *left, Node* right)
{
   Node* p;

   if ((p = (Node *)malloc(sizeof(Node))) == NULL)
       return NULL;
   p->key = key;
   p->height = 0;
   p->left = left;
   p->right = right;

   return p;
}

Node* avltree_insert(AVLTree tree, Type key)     //插入节点
{
   if (tree == NULL)
   {
       tree = avltree_create_node(key, NULL, NULL);
       if (tree==NULL)
       {
           printf("ERROR: create avltree node failed!\n");
           return NULL;
       }
   }
   else if (key < tree->key)
   {
       tree->left = avltree_insert(tree->left, key);
       if (Height(tree->left) - Height(tree->right) == 2)
       {
           if (key < tree->left->key)
               tree = left_left_rotation(tree);
           else
               tree = left_right_rotation(tree);
       }
   }
   else if (key > tree->key)
   {
       tree->right = avltree_insert(tree->right, key);
       if (Height(tree->right) - Height(tree->left) == 2)
       {
           if (key > tree->right->key)
               tree = right_right_rotation(tree);
           else
               tree = right_left_rotation(tree);
       }
   }
   else
   {
       printf("添加失败：不允许添加相同的节点！\n");
   }

   tree->height = MAX( Height(tree->left), Height(tree->right)) + 1;

   return tree;
}

static Node* delete_node(AVLTree tree, Node *z)     //删除节点
{
   if (tree==NULL || z==NULL)
       return NULL;

   if (z->key < tree->key)        
   {
       tree->left = delete_node(tree->left, z);
       if (Height(tree->right) - Height(tree->left) == 2)
       {
           Node *r =  tree->right;
           if (Height(r->left) > Height(r->right))
               tree = right_left_rotation(tree);
           else
               tree = right_right_rotation(tree);
       }
   }
   else if (z->key > tree->key)
   {
       tree->right = delete_node(tree->right, z);
       if (Height(tree->left) - Height(tree->right) == 2)
       {
           Node *l =  tree->left;
           if (Height(l->right) > Height(l->left))
               tree = left_right_rotation(tree);
           else
               tree = left_left_rotation(tree);
       }
   }
   else    
   {
       if ((tree->left) && (tree->right))
       {
           if (Height(tree->left) > Height(tree->right))
           {
               Node *max = avltree_maximum(tree->left);
               tree->key = max->key;
               tree->left = delete_node(tree->left, max);
           }
           else
           {
               Node *min = avltree_maximum(tree->right);
               tree->key = min->key;
               tree->right = delete_node(tree->right, min);
           }
       }
       else
       {
           Node *tmp = tree;
           tree = tree->left ? tree->left : tree->right;
           free(tmp);
       }
   }
if (tree != NULL)
{
tree->height =MAX(Height(tree->left), Height(tree->right)) + 1;
}
   return tree;
}

Node* avltree_delete(AVLTree tree, Type key)    //删除值为key的节点
{
   Node *z;

   if ((z = avltree_search(tree, key)) != NULL)
       tree = delete_node(tree, z);
   return tree;
}

void main()
{
   int i,n,x;
   AVLTree root=NULL;

int arr[99];
printf("请输入要插入的个数:");
scanf("%d",&n);
printf("请输入要插入的数:");
for(i=0;i<n;i++)
{
scanf("%d",&arr[i]);
}

   printf("== 依次添加: ");
   for(i=0; i<n; i++)
   {
       printf("%d ", arr[i]);
       root = avltree_insert(root, arr[i]);
   }
printf("\n");
printf("== 插入后的树为:\n");
printf("== 中序遍历: ");
   inorder_avltree(root);
   printf("\n");
printf("== 插入后高度为: %d\n", Height(root));

printf("\n");
printf("请输入要删除的数:");
scanf("%d",&x);
   printf("== 删除根节点: %d\n", x);
   root = avltree_delete(root, x);
   printf("== 删除后的树为: \n");
printf("== 中序遍历: ");
   inorder_avltree(root);
printf("\n");
printf("== 删除后高度为: %d\n", Height(root));
}