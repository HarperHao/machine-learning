动态规划法解决0-1背包问题
#include<stdio.h>
#include<stdlib.h>

int V[100][100];

int max(int a,int b){
  if(a>=b)
      return a;
  else return b;
}

int KnapSack(int n,int weight[],int value[],int C){
   
   for(int i=0;i<=n;i++)
       V[i][0]=0;
   for(int j=0;j<=C;j++)
       V[0][j]=0;
   
printf("编号 重量 价值  ");  
for(int i=1;i<=C;i++)
printf(" %2d ",i);
printf("\n\n");
   
   for(int i=1;i<=n;i++){
printf("%2d   %2d   %2d     ",i,weight[i-1],value[i-1]);  
       for(int j=1;j<=C;j++){
           if(j<weight[i-1]){  
V[i][j]=V[i-1][j];
printf("%2d  ",V[i][j]);
}
           else{  
               V[i][j]=max(V[i-1][j],V[i-1][j-weight[i-1]]+value[i-1]);
printf("%2d  ",V[i][j]);
}
}
printf("\n");
}

       return V[n][C];
       
}

void Judge(int C,int n,int weight[]){
   int j=C;
   int *state=(int *)malloc(n*sizeof(int));
   
   for(int i=n;i>=1;i--){
   if(V[i][j]>V[i-1][j]){
state[i]=1;
j=j-weight[i-1];
       }
   else
       state[i]=0;
   }
   printf("选中的物品是:");
   for(int i=1;i<=n;i++)
       if(state[i]==1)
        printf("%d ",i);
   printf("\n");
}
int main(){
   int n;        
   int Capacity;
   
   printf("请输入背包的最大容量:");
   scanf("%d",&Capacity);
   
   printf("输入物品数:");
   scanf("%d",&n);    
   int *weight=(int *)malloc(n*sizeof(int));
   int *value=(int *)malloc(n*sizeof(int));    
   printf("请分别输入物品的重量:");
   for(int i=0;i<n;i++)
       scanf("%d",&weight[i]);
   printf("请分别输入物品的价值:");
   for(int i=0;i<n;i++)
       scanf("%d",&value[i]);
   int s=KnapSack(n,weight,value,Capacity);  
   Judge(Capacity,n,weight);  
   printf("最大物品价值为: ");
   printf("%d\n",s);  
   return 0;
}