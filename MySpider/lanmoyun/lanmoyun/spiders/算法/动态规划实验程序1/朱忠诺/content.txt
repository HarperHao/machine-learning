#include <stdio.h>  
#include<stdlib.h>
#define INF 1000
typedef int VertexType;
typedef int EdgeType;
typedef struct
{
VertexType vexs[4];
EdgeType edges[4][4];
int vexnum, arcnum;
}MGraph;

void CreateGraph(MGraph* G)
{
int i, j, k, weight;
int ch1, ch2;
printf("请输入城市数目和距离(输入格式为:城市数,路径数目):");
scanf_s("%d,%d", &(G->vexnum), &(G->arcnum));
printf("请输入城市名称(输入格式为:数字代号)：");
for (i = 0; i < G->vexnum; i++)
{
getchar();
scanf_s("%d", &(G->vexs[i]));
}
for (i = 0; i < G->vexnum; i++)
for (j = 0; j < G->vexnum; j++)
if (i == j)
G->edges[i][j] = 0;
else
G->edges[i][j] = INF;
printf("请输入每条路径对应的两个城市名称(输入格式为数字代号):\n");
for (k = 0; k < G->arcnum; k++)
{
printf("请输入第%d条路径的两个城市名称：", k + 1);
scanf_s("%d,%d", &ch1, &ch2);
for (i = 0; ch1 != G->vexs[i]; i++);
for (j = 0; ch2 != G->vexs[j]; j++);
getchar();
printf("请输入第%d条边的距离：", k + 1);
scanf_s("%d", &weight);
G->edges[i][j] = weight;
G->edges[j][i] = weight;
}
}

void Dijkstra(MGraph G, int v0, int* P, int* D)
{
int v, w, k, min;
int final[4];
for (v = 0; v < G.vexnum; v++)
{
final[v] = 0;
D[v] = G.edges[v0][v];
P[v] = 0;
}
D[v0] = 0;
final[v0] = 1;
for (v = 1; v < G.vexnum; v++)
{
min = INF;
for (w = 0; w < G.vexnum; w++)
{
if (!final[w] && D[w] < min)
{
k = w;
min = D[w];
}
}
final[k] = 1;
for (w = 0; w < G.vexnum; w++)
{
if (!final[w] && (min + G.edges[k][w] < D[w]))
{
D[w] = min + G.edges[k][w];
P[w] = k;
}
}
}
}

void Floyd(MGraph G, int P[4][4], int D[4][4])
{
int v, w, k;
for (v = 0; v < G.vexnum; v++)
{
for (w = 0; w < G.vexnum; w++)
{
D[v][w] = G.edges[v][w];
P[v][w] = w;
}
}
for (k = 0; k < G.vexnum; k++)
{
for (v = 0; v < G.vexnum; v++)
{
for (w = 0; w < G.vexnum; w++)
{
if (D[v][w] > (D[v][k] + D[k][w]))
{
D[v][w] = D[v][k] + D[k][w];
P[v][w] = P[v][k];
}

}
}
}
}

int main()
{
MGraph G;
CreateGraph(&G);
int v0 = 0, i, j, v, w, k;
int P[4][4];
int D[4][4];
int M[4];
int N[4];
Dijkstra(G, v0, M, N);
printf("\n");
printf("输出第一个城市到其他城市的最短距离：\n");
for (j = 0; j < 4; j++)
{
printf("%d ", N[j]);
}
printf("\n\n");
printf("邻接矩阵\n");
for (i = 0; i < 4; i++)
{
for (j = 0; j < 4; j++)
printf("%d ", G.edges[i][j]);
printf("\n");
}
Floyd(G, P, D);
printf("\n");
printf("输出各个城市之间最短距离\n");
for (v = 0; v < G.vexnum; v++)
{
for (w = v + 1; w < G.vexnum; w++)
{
printf("v%d-v%d weight:%d ", v, w, D[v][w]);
k = P[v][w];
printf("path:%d", v);
while (k != w)
{
printf("->%d", k);
k = P[k][w];
}
printf("->%d\n", w);
}
}
system("pause");
return 0;
}