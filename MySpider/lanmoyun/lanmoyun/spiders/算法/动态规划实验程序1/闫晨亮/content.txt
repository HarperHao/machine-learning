动态规划求最短路径
#include<stdio.h>

#define FINITY 5000
#define M 20
typedef char vertextype;
typedef int edgetype;
typedef struct
{
vertextype vexs[M];     //定点
edgetype edges[M][M];    //邻接矩阵
int n,e;
}Mgraph;


typedef enum{FALSE,TRUE} boolean;
typedef int dist[M];     //距离向量
typedef int path[M];     //路径向量

void creat(Mgraph *g,char *s,int c)     //建立图的邻接矩阵
{
int i,j,k,w;
FILE *rf;
rf=fopen(s,"r");
if(rf)
{
fscanf(rf,"%d%d",&g->n,&g->e);    //读入图的顶点数与边数
for(i=0;i<g->n;i++)      //读入图的定点值
fscanf(rf,"%1s",&g->vexs[i]);
for(i=0;i<g->n;i++)
for(j=0;j<g->n;j++)
if(i==j)
g->edges[i][j]=0;
else
g->edges[i][j]=FINITY;
for(k=0;k<g->e;k++)     //读入网络中的边
{
fscanf(rf,"%d%d%d",&i,&j,&w);
g->edges[i][j]=w;
if(c==0)
g->edges[i][j]=w;
}
fclose(rf);
}
else
g->n=0;
}


void dijkstra(Mgraph g,int v0,path p,dist d)      //Dijkstra算法求最短路径
{
boolean final[M];
int i,k,j,v,min,x;
for(v=0;v<g.n;v++)
{
final[v]=FALSE;
d[v]=g.edges[v0][v];
if(d[v]<FINITY&&d[v]!=0)
p[v]=v0;
else
p[v]=-1;
}
final[v0]=TRUE;
d[v0]=0;


for(i=1;i<g.n;i++)
{
min=FINITY;
for(k=0;k<g.n;++k)
if(!final[k]&&d[k]<min)
{
v=k;
min=d[k];
}
printf("\n%c---%d\n",g.vexs[v],min);
if(min==FINITY)
return;
final[v]=TRUE;
for(k=0;k<g.n;++k)
if(!final[k]&&(min+g.edges[v][k]<d[k]))
{
d[k]=min+g.edges[v][k];
p[k]=v;
}
}
}

void print_gpd(Mgraph g,path p,dist d)     //输出有向图的最短路径算法
{
int st[M],i,pre,top=-1;
for(i=0;i<g.n;i++)
{
printf("\n距离: %7d , 路径:",d[i]);
st[++top]=i;
pre=p[i];
while(pre!=-1)
{
st[++top]=pre;
pre=p[pre];
}
while(top>0)
printf("%2d",st[top--]);
}
}


int main()
{
Mgraph g;
path p;
dist d;
int v0,v;
creat(&g,"tu.txt",1);
printf("请输入源点v0:");
scanf("%d",&v0);
dijkstra(g,v0,p,d);
print_gpd(g,p,d);
printf("\n");

return 0;
}