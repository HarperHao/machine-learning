def optimal_bst(p, q, n):
   e = [[0 for j in range(n + 1)] for i in range(n + 2)]
   w = [[0 for j in range(n + 1)] for i in range(n + 2)]
   root = [[0 for j in range(n + 1)] for i in range(n + 1)]
   for i in range(n + 2):
       e[i][i - 1] = q[i - 1]
       w[i][i - 1] = q[i - 1]
   for l in range(1, n + 1):
       for i in range(1, n - l + 2):
           j = i + l - 1
           e[i][j] = float("inf")
           w[i][j] = w[i][j - 1] + p[j] + q[j]
           for r in range(i, j + 1):
               t = e[i][r - 1] + e[r + 1][j] + w[i][j]
               if t < e[i][j]:
                   e[i][j] = t
                   root[i][j] = r
   return e, root


if __name__ == "__main__":
   p = [0, 0.15, 0.1, 0.05, 0.1, 0.2]
   q = [0.05, 0.1, 0.05, 0.05, 0.05, 0.1]
   e, root = optimal_bst(p, q, 5)
   for i in range(5 + 2):
       for j in range(5 + 1):
           print(e[i][j], " ", end='')
       print()
   for i in range(5 + 1):
       for j in range(5 + 1):
           print(root[i][j], " ", end='')
       print()