学会用动态规划解决最长公共子序列问题:
word_a =input("输入第一个序列:")
word_b =input("输入第二个序列:")
def sub_count(word_a,word_b):
   cell = {}
   for i in range(len(word_a)):
       cell[i]={}
       for j in range(len(word_b)):
           cell[i][j]=0
           if i < 1 or j < 1:
               if word_a[i] == word_b[j]:
                   if i==0 and j==0:
                       cell[i][j] = 1
                       print(word_a[i],end=",")
                   elif i == 0 and j>=1:
                       cell[0][j] = cell[0][j-1]+1
                       print(word_a[i],end=",")
                   else:
                       cell[i][0] = cell[i-1][0]+1
                       print(word_a[i],end=",")
               else:
                   if i==0 and j==0:
                       cell[i][j] = 0
                   elif i == 0 and j>=1:
                       cell[0][j] = cell[0][j-1]
                   else:
                       cell[i][0] = cell[i-1][0]
           else:
               if word_a[i] == word_b[j]:
                   cell[i][j]=cell[i-1][j-1]+1
                   print(word_a[i],end=",")
               else:
                   cell[i][j]=max(cell[i-1][j],cell[i][j-1])
   sim_len = []
   for i in cell.values():
       for j in i.values():
           sim_len.append(j)
   return(cell,max(sim_len))
mat,sim_len = sub_count(word_a,word_b)
print(sim_len)