实验名称：
动态规划-最短路径问题
实验目的：
了解动态规划思想，解决单源最短路径问题。
实验题目：
解决单源最短路径问题
实验源代码：
#include<stdio.h>
#define FINITY 5000
#define M 20
typedef char vertexttype;
typedef int edgetype;
typedef struct{
vertexttype vex[M];
edgetype edges[M][M];
int n,e;
}Mgraph;
typedef enum{FALSE,TRUE}boolean;
typedef int dist[M];
typedef int path[M];
void creat(Mgraph *g,int c)
{
int i,j,k,w;
printf("请输入顶点数与边数：\n");
scanf("%d%d",&g->n,&g->e);
printf("输入顶点代号：\n");
for(i=0;i<g->n;i++)
scanf("%d",&g->vex[i]);
for(i=0;i<g->n;i++)
for(j=0;j<g->n;j++)
if(i==j)
g->edges[i][j]=0;
else
g->edges[i][j]=FINITY;
printf("请输入边(例：0 1 7，就是0和1点之间的距离为7):\n");
for(k=0;k<g->e;k++)
{
scanf("%d%d%d",&i,&j,&w);
g->edges[i][j]=w;
if(c==0)
g->edges[j][i]=w;
}
}
void dijkstra(Mgraph g,int v0,path p,dist d)
{
boolean final[M];
int i,j,k,v,min,x;
for(v=0;v<g.n;v++)
{
final[v]=FALSE;
d[v]=g.edges[v0][v];
if(d[v]<FINITY&&d[v]!=0)
p[v]=v0;
else
p[v]=-1;
}
final[v0]=TRUE;
d[v0]=0;
for(i=1;i<g.n;i++)
{
min=FINITY;
for(k=0;k<g.n;++k)
if(!final[k]&&d[k]<min)
{
v=k;
min=d[k];
}
if(min==FINITY)
return;
final[v]=TRUE;
for(k=0;k<g.n;++k)
if(!final[k]&&(min+g.edges[v][k]<d[k]))
{
d[k]=min+g.edges[v][k];
p[k]=v;
}
}
}
void print_gpd(Mgraph g,path p,dist d)
{
int st[M],i,pre,top=-1;
for(i=0;i<g.n;i++)
{
printf("距离:%4d,路径:",d[i]);
st[++top]=i;
pre=p[i];
while(pre!=-1)
{
st[++top]=pre;
pre=p[pre];
}
while(top>0)
printf("%2d",st[top--]);
printf("\n");
}
}
int main()
{
Mgraph g;
path p;
dist d;
int v0;
creat(&g,1);
printf("输入源点：");
scanf("%d",&v0);
dijkstra(g,v0,p,d);
print_gpd(g,p,d);
return 0;
}