import numpy as np
def knapsack(weight, value, C):
   v = np.zeros([len(weight)+1, C+1])
   goods = np.full([len(weight)+1, C+1], '', dtype='<U30')
   for i in range(1, v.shape[0]):
       for j in range(1, v.shape[1]):
           temp = 0
           if weight[i-1] > j:
               v[i][j] = v[i-1][j]
           else:
               temp = value[i-1] + v[i-1][j - weight[i-1]]
               v[i][j] = max(v[i-1][j], temp)
           if v[i-1][j] > temp:
               goods[i][j] = goods[i-1][j]
           elif v[i-1][j] < temp:
               if goods[i-1][j - weight[i-1]] == '':
                   goods[i][j] = str(i - 1)
               else:
                   goods[i][j] = goods[i-1][j - weight[i-1]] + '_' + str(i-1)
           else:  
               w1 = 0
               w2 = weight[i-1]
               for g1 in goods[i-1][j].split('_'):
                   w1 += weight[int(g1)]
               for g2 in goods[i-1][j - weight[i-1]].split('_'):
                   w2 += weight[int(g2)]
               if w1 < w2:
                   goods[i][j] = goods[i - 1][j]
               elif w1 > w2:
                   goods[i][j] = goods[i - 1][j - weight[i - 1]] + '_' + str(i - 1)
               else:  
                   goods[i][j] = goods[i - 1][j] + '|' + goods[i - 1][j - weight[i - 1]] + '_' + str(i - 1)
   print(v)
   print(goods)
if __name__ == '__main__':
   weight = [1, 4, 3]
   value = [1500, 3000, 2000]
   knapsack(weight, value, C=4)