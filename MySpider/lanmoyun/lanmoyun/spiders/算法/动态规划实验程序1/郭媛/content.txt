用动态规划法求单源最短路径
def Dijkstra(graph,begin):
   if graph is None:
       return None
   nodes = [i for i in range(len(graph))]  # 获取图中所有节点
   visited=[]  # 记录最短路径的节点集合
   if begin in nodes:
       visited.append(begin)
       nodes.remove(begin)
   else:
       return None
   distance={begin:0}  # 记录源点到各个节点的距离
   for i in nodes:
       distance[i]=graph[begin][i]
   path={begin:{begin:[]}}  # 记录源节点到每个节点的路径
   k=pre=begin
   while nodes:
       min_distance=float('inf')
       for v in visited:
           for n in nodes:
               new_distance = graph[begin][v]+graph[v][n]
               if new_distance < min_distance:
                   min_distance=new_distance
                   graph[begin][n]=new_distance
                   k=n
                   pre=v
       distance[k]=min_distance  # 最短路径
       path[begin][k]=[i for i in path[begin][pre]]
       path[begin][k].append(k)
       visited.append(k)
       nodes.remove(k)
       #print(visited,nodes)
   return distance,path
if __name__ == '__main__':
   graph = [ [0, 2, 1, 4, 5, 1],
           [3, 0, 4, 2, 3, 4],
           [2, 1, 0, 1, 2, 4],
           [5, 5, 2, 0, 3, 3],
           [1, 4, 3, 4, 0, 1],
           [3, 6, 7, 3, 1, 0]]
   distance,path= Dijkstra(graph, 4)  #查找从源点4到其他节点的最短路径
   print("源点4到其他点的最短距离:",distance)
   print("最短路径经过的点分别为：",path)