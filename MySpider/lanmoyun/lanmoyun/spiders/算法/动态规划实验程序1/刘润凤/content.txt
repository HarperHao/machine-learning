实验名称    动态规划-01背包问题
实验目的    学习动态规划法的原理和方法，并熟练运用。
                掌握01背包的动态规划求解法。
实验题目

一个旅行者有一个最多能用 m 公斤的背包，现在有 n 件物品，它们的重量分别是 W1 ，W2 ，... , Wn ,它们的价值分别为 C1，C2 ，... ，Cn 。若每种物品只有一件求旅行者能获得最大总价值。

实验源代码

def knapsack(p, w, v):
   n = len(p)
   lists, arr = [], [[0] * (v + 1) for _ in range(n + 1)]
   for i in range(1, n + 1):
       for j in range(1, v + 1):
           if w[i - 1] <= j:  # 如果当前物品的体积不超过背包的容量，p[i-1]当前物品的价值，w[i-1]当前物品的体积
             arr[i][j] = max(arr[i - 1][j], p[i - 1] + arr[i - 1][j - w[i - 1]])
           else:  # 如果当前物品的体积超过背包的容量
               arr[i][j] = arr[i - 1][j]
   remain = v
   for i in range(n, 0, -1):
       if arr[i][remain] > arr[i - 1][remain]:
           lists.append(i - 1)  # (i-1)为当前物品的编号
           remain -= w[i - 1]  # 容积减去已经找到的物品，再次寻找
   return arr[-1][-1], lists

if __name__ == '__main__':
   p = [100 ,500, 100 ,600 ,120]  # 物品的价值
   w = [3, 2, 9, 4, 3] # 物品占的体积
   v = 8  # 背包的容量
   print("(最大价值，[物体编号])")
   print(knapsack(p, w, v))