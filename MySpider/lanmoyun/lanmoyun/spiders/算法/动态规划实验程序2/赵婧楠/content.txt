定义两个序列s1、s2，二维数组f[i][j]表示X的i位和Y的j位之前的最长公共子序列长度，
if s1[i-1]==s2[j-1]:
               c[i][j]=c[i-1][j-1]+1
           else:
               c[i][j]=max(c[i-1][j],c[i][j-1])
即
若s1 n=s2 m(最后一个字符相同)，则： 
s1 n与s2 m的最长公共子序列Zk的最后一个字符必定为s1m 
ck=s1m=s2n 
LCS(s1n,s2m) = LCS(s1n-1,s2m-1)+xn

若s1n≠s2m则： 
LCS(s1n,s2m)= max{LCS(s1n-1,s2m),LCS(s1n,s2m-1)}



def LCS(s1,s2):
   n=len(s1)
   m=len(s2)

   c=[[0 for i in range(m+1)] for j in range(n+1)]
   for i in range(1,n+1):
       for j in range(1,m+1):
           if s1[i-1]==s2[j-1]:
               c[i][j]=c[i-1][j-1]+1
           else:
               c[i][j]=max(c[i-1][j],c[i][j-1])
   return c, c[-1][-1]
print(LCS("abcdefg","adefgwgeweg"))