实验名称   动态规划-最长子序列
实验目的   学习动态规划法的原理和方法，并熟练运用。
              掌握最长子序列的动态规划解法。
实验题目  求两个字符串最大相同的公共子串。
实验源代码

def max_common_s(s1, s2):
   chart = [[0 for i in range(len(s1)+1)]for j in range(len(s2)+1)]   # 建立一个二维数组
   for i in range(1, len(s2)+1):
       for j in range(1, len(s1)+1):
           if s1[j-1] == s2[i-1]:     # 如果对应的两个值相等，则其左上方的值加1
               chart[i][j] = chart[i-1][j-1]+1
           else:
               chart[i][j] = max(chart[i-1][j], chart[i][j-1])  # 要是不相等，则取其右方或上方的最大值
   return chart

def find_one(chart, s1, s2):
   max_str = ''
   i = len(s1)
   j = len(s2)
   while i > 0 and j > 0:
       if s1[i-1] == s2[j-1]:   # 若最后一个字符相等，则一定来自于左上方
           max_str += s1[i-1]
           i -= 1
           j -= 1
       else:
           if chart[j][i-1] > chart[j-1][i]:  # 若左边的数字较大，则来自左边
               i -= 1
           else:    # 否则来自上方
               j -= 1
   return reversed(max_str)       # 逆序输出

if __name__ == '__main__':
   s1 = 'ABCasdasd'
   s2 = 'ADCsadsadsad'
   chart = max_common_s(s1, s2)
   print(''.join(list(find_one(chart, s1, s2))))