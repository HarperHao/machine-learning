package bag;

import java.util.Scanner;

public class ZeroOnePack {
   // N表示物体的个数，V表示背包的载重
   int N,V;
   private int[] weight;  //重量
   private int[] value;   //价值
   private int[][] F;
   public void ZeroOnePackNonRecursive() {
       //对二维数组F进行初始化
       for(int j = 0; j <= V; j++) {
           F[0][j] = 0;
       }
       for(int i = 1; i <= N; i++) {
           for(int j = 0; j <= V; j++) {
               //如果容量为j的背包放得下第i个物体
               if(j >= weight[i]) {
                   F[i][j] = Math.max(F[i - 1][j - weight[i]] + value[i], F[i - 1][j]);
               }else {
                   //放不下，只能选择不放第i个物体
                   F[i][j] = F[i - 1][j];
               }
           }
       }

       //打印所有结果，我们要求的是F[N][V]
       for(int i = 0; i <= N; i++) {
           for(int j = 0; j <= V; j++) {
               System.out.print(F[i][j] + " ");
           }
           System.out.println();
       }
   }
   public void printResult(int n, int v) {
       boolean[] isAdd = new boolean[n + 1];

       for(int i = n; i >= 1; i--) {
           if(F[i][v] == F[i-1][v])
               isAdd[i] = false;
           else {
               isAdd[i] = true;
               v -= weight[i];
           }
       }

       for(int i = 1; i <= n; i++) {
           System.out.print(isAdd[i] + " ");
       }
       System.out.println();
   }
   public void init() {
       Scanner sc = new Scanner(System.in);
       N = sc.nextInt();
       V = sc.nextInt();

       //下标从1开始，表示第1个物品
       weight = new int[N + 1];
       value = new int[N + 1];
       F= new int[N + 1][V + 1];//注意是 N + 1，因为需要一个初始状态F[0][0]，表示前0个物品放进空间为0的背包的最大收益

       for(int i = 1; i <= N; i++) {
           weight[i] = sc.nextInt();
       }

       for(int i = 1; i <= N; i++) {
           value[i] = sc.nextInt();
       }
   }

   public static void main(String[] args) {
       ZeroOnePack zop = new ZeroOnePack();
       zop.init();
       zop.ZeroOnePackNonRecursive();
       zop.printResult(zop.N,zop.V);
   }
}