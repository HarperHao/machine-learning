动态规划法解决背包问题：
给定n种物品和一背包。物品i的重量是wi，其价值为vi，背包的容量为C。问应如何选择装入背包的物品，使得装入背包中物品的总价值最大?
每个背包只有两种选择，要么装入，要么不装入（不能装入多次，也不能部分装入）

def bag(n,m,w,v):
res = [[0 for j in range(m+1)]for i in range(n+1)] #n+1 行，m+1列 值为0的矩阵
for i in range(1,n+1):
for j in range(1,m+1):
res[i][j] = res[i-1][j] #0->res[0][1]->res[1][1]
if j>=w[i-1] and res[i][j]<res[i-1][j-w[i-1]]+v[i-1]:#如果res[i-1][j]小于res[i-1][j-w[i-1]]+v[i-1]，那么res[i][j]就等于res[i-1][j]，否则就等于res[i-1][j-w[i-1]]+v[i-1]
res[i][j] = res[i-1][j-w[i-1]]+v[i-1]
return res

def show(n,m,w,res):
print(u"最大值为%d"%res[n][m])
x = [False for i in range(n)]
j = m
for  i in range(n,0,-1):
if res[i][j]!=res[i-1][j]:
x[i-1] = True
j-=w[i-1]
print(u"选择的物品为")
for i in range(n):
if x[i]:
print(u"第%d个"%(i+1))
print()

if __name__ == "__main__":
#n种物品，承重量为m，w物品的重量，v 物品的价值
n= 4
m = 5
w = [2,1,3,2]
v = [12,10,20,15]
res = bag(n,m,w,v)
print(res)
show(n,m,w,res)