import numpy as np

class Graph:
   def __init__(self,graph,labels):
       self.Arcs=graph
       self.VertexNum=graph.shape[0]
       self.labels=labels


def Dijkstra(self,Vertex,End):
   Dist=[[] for i in range(self.VertexNum)]
   Path=[[] for i in range(self.VertexNum)]
   flag=[[] for i in range(self.VertexNum)]
   index=0
   while index<self.VertexNum:
       Dist[index]=self.Arcs[Vertex][index]
       flag[index]=0
       if self.Arcs[Vertex][index]<float('inf'):
           Path[index]=Vertex
       else:
           Path[index]=-1
       index+=1
   flag[Vertex]=1
   Path[Vertex]=0
   Dist[Vertex]=0
   index=1
   while index<self.VertexNum:
       MinDist=float('inf')
       j=0
       while j<self.VertexNum:
           if flag[j]==0 and Dist[j]<MinDist:
               tVertex=j
               MinDist=Dist[j]
           j+=1
       flag[tVertex]=1
       EndVertex=0
       MinDist=float('inf')
       while EndVertex<self.VertexNum:
           if flag[EndVertex]==0:
               if self.Arcs[tVertex][EndVertex]<MinDist and Dist[
                   tVertex]+self.Arcs[tVertex][EndVertex]<Dist[EndVertex]:
                   Dist[EndVertex]=Dist[tVertex]+self.Arcs[tVertex][EndVertex]
                   Path[EndVertex]=tVertex
           EndVertex+=1
       index+=1
   vertex_endnode_path=[]
   return Dist[End],paths(Path,Vertex,End,vertex_endnode_path)


def paths(Path,start,end,path):
   if start==end:
       path.append(start)
   else:
       path.append(end)
       paths(Path,start,Path[end], path)
   return path


if __name__=='__main__':
   graph = np.array([[0, 6, 5, float('inf'), float('inf'), float('inf')],
                     [float('inf'), 0, 2, 8, float('inf'), float('inf')],
                     [float('inf'), float('inf'), 0, float('inf'), 3, float('inf')],
                     [float('inf'), float('inf'), 7, 0, float('inf'), 9],
                     [float('inf'), float('inf'), float('inf'), float('inf'), 0, 9],
                     [float('inf'), float('inf'), float('inf'), float('inf'), 0]])
   G=Graph(graph,labels=['上海', '深圳', '北京', '西安', '云南', '厦门'])
   start=input('请输入源点：')
   endnode=input('请输入终点：')
   dist,path=Dijkstra(G, G.labels.index(start), G.labels.index(endnode))
   Path=[]
   for i in range(len(path)):
       Path.append(G.labels[path[len(path) - 1 - i]])
   print('从顶点{}到顶点{}的最短路径为：{}\n最短路径长度为：{}'.format(start,endnode,Path,dist))