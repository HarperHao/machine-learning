实验名称
动态规划法的应用
实验目的
掌握动态规划法求解具体问题的一般步骤，具备运用动态规划法思想编程实现矩阵连乘、0-1背包、最大子段和等问题的能力。
实验题目
  现计划从广州出发，计划到长沙、南昌、武汉旅行，要求从广州出发，其余三个城市途经且仅途经一次，最后回到广州。各个城市之间的所有出行成本量化为一个权值在下图中表示。求所走权值最小的路线。
实验源代码
MAX = 1000
arc = [[MAX, 3, 6, 7],
      [5, MAX, 2, 3],
      [6, 4, MAX, 2],
       [3, 7, 5, MAX]]


class Solution:
   def __init__(self, X, start_node):
       self.X = X  # 距离矩阵
       self.start_node = start_node  # 开始的节点
       self.array = [[0] * (2 ** len(self.X)) for i in range(len(self.X))]  # 记录处于x节点，未经历M个节点时，矩阵储存x的下一步是M中哪个节点

   def transfer(self, sets):
       su = 0
       for s in sets:
           su = su + 2 ** s  # 二进制转换
       return su

   # tsp总接口
   def tsp(self):
       s = self.start_node
       num = len(self.X)
       cities = list(range(num))  # 形成节点的集合
       past_sets = [s]  # 已遍历节点集合
       cities.pop(cities.index(s))  # 构建未经历节点的集合
       node = s  # 初始节点
       return self.solve(node, cities)  # 求解函数

   def solve(self, node, future_sets):
       # 迭代终止条件，表示没有了未遍历节点，直接连接当前节点和起点即可
       if len(future_sets) == 0:
           return self.X[node][self.start_node]
       d = 99999
       # node如果经过future_sets中节点，最后回到原点的距离
       distance = []
       # 遍历未经历的节点
       for i in range(len(future_sets)):
           s_i = future_sets[i]
           copy = future_sets[:]
           copy.pop(i)  # 删除第i个节点，认为已经完成对其的访问
           distance.append(self.X[node][s_i] + self.solve(s_i, copy))
       # 动态规划递推方程，利用递归
       d = min(distance)
       # node需要连接的下一个节点
       next_one = future_sets[distance.index(d)]
       # 未遍历节点集合
       c = self.transfer(future_sets)
       # 回溯矩阵，（当前节点，未遍历节点集合）――>下一个节点
       self.array[node][c] = next_one
       return d


def city_name(city_node):
   if city_node == 0:
       city_name = '广州'
   elif city_node == 1:
       city_name = '长沙'
   elif city_node == 2:
       city_name = '南昌'
   else:
       city_name = '武汉'
   return city_name


def main():
   S = Solution(arc, 0)
   print("TheMinLength is:",S.tsp())

   # 开始回溯
   M = S.array
   lists = list(range(len(S.X)))
   start = S.start_node
   print(city_name(start), end="")
   while len(lists) > 0:
       lists.pop(lists.index(start))
       m = S.transfer(lists)
       next_node = S.array[start][m]
       print("--->", city_name(next_node), end="")
       start = next_node


if __name__ == "__main__":
   main()

实验结果（给出题目的运行结果（插入运行结果截图））
TheMinLength is: 10
广州---> 长沙---> 南昌---> 武汉---> 广州